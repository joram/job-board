/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'logo_url': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'website_url': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'address'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const Currency = {
    Cad: 'CAD',
    Usd: 'USD'
} as const;

export type Currency = typeof Currency[keyof typeof Currency];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface JobPosting
 */
export interface JobPosting {
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'user_id': string;
    /**
     * 
     * @type {Company}
     * @memberof JobPosting
     */
    'company'?: Company;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'company_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'job_title': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'requirements': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'benefits': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'application_url': string;
    /**
     * 
     * @type {number}
     * @memberof JobPosting
     */
    'min_salary': number;
    /**
     * 
     * @type {number}
     * @memberof JobPosting
     */
    'max_salary': number;
    /**
     * 
     * @type {Currency}
     * @memberof JobPosting
     */
    'salary_currency': Currency;
}


/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * AuthenticationRequiredApi - axios parameter creator
 * @export
 */
export const AuthenticationRequiredApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Company
         * @param {string} companyId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyCompanyCompanyIdDelete: async (companyId: string, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCompanyCompanyCompanyIdDelete', 'companyId', companyId)
            const localVarPath = `/company/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Job Posting
         * @param {string} postingId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJobPostingJobPostingPostingIdDelete: async (postingId: string, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('deleteJobPostingJobPostingPostingIdDelete', 'postingId', postingId)
            const localVarPath = `/job_posting/{posting_id}`
                .replace(`{${"posting_id"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get My Companies
         * @param {string} userId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCompaniesUserUserIdCompaniesGet: async (userId: string, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getMyCompaniesUserUserIdCompaniesGet', 'userId', userId)
            const localVarPath = `/user/{user_id}/companies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get My Postings
         * @param {string} userId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyPostingsUserUserIdPostingsGet: async (userId: string, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getMyPostingsUserUserIdPostingsGet', 'userId', userId)
            const localVarPath = `/user/{user_id}/postings`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch Job Posting
         * @param {string} postingId 
         * @param {JobPosting} jobPosting 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchJobPostingJobPostingPostingIdPatch: async (postingId: string, jobPosting: JobPosting, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('patchJobPostingJobPostingPostingIdPatch', 'postingId', postingId)
            // verify required parameter 'jobPosting' is not null or undefined
            assertParamExists('patchJobPostingJobPostingPostingIdPatch', 'jobPosting', jobPosting)
            const localVarPath = `/job_posting/{posting_id}`
                .replace(`{${"posting_id"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobPosting, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Company
         * @param {Company} company 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyCompanyPost: async (company: Company, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'company' is not null or undefined
            assertParamExists('postCompanyCompanyPost', 'company', company)
            const localVarPath = `/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(company, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Job Posting
         * @param {JobPosting} jobPosting 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postJobPostingJobPostingPost: async (jobPosting: JobPosting, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobPosting' is not null or undefined
            assertParamExists('postJobPostingJobPostingPost', 'jobPosting', jobPosting)
            const localVarPath = `/job_posting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobPosting, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put Company
         * @param {string} companyId 
         * @param {Company} company 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCompanyCompanyCompanyIdPut: async (companyId: string, company: Company, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('putCompanyCompanyCompanyIdPut', 'companyId', companyId)
            // verify required parameter 'company' is not null or undefined
            assertParamExists('putCompanyCompanyCompanyIdPut', 'company', company)
            const localVarPath = `/company/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(company, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationRequiredApi - functional programming interface
 * @export
 */
export const AuthenticationRequiredApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationRequiredApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Company
         * @param {string} companyId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompanyCompanyCompanyIdDelete(companyId: string, xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompanyCompanyCompanyIdDelete(companyId, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Job Posting
         * @param {string} postingId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJobPostingJobPostingPostingIdDelete(postingId: string, xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJobPostingJobPostingPostingIdDelete(postingId, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get My Companies
         * @param {string} userId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyCompaniesUserUserIdCompaniesGet(userId: string, xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyCompaniesUserUserIdCompaniesGet(userId, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get My Postings
         * @param {string} userId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyPostingsUserUserIdPostingsGet(userId: string, xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyPostingsUserUserIdPostingsGet(userId, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Patch Job Posting
         * @param {string} postingId 
         * @param {JobPosting} jobPosting 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchJobPostingJobPostingPostingIdPatch(postingId: string, jobPosting: JobPosting, xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPosting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchJobPostingJobPostingPostingIdPatch(postingId, jobPosting, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post Company
         * @param {Company} company 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCompanyCompanyPost(company: Company, xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyCompanyPost(company, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post Job Posting
         * @param {JobPosting} jobPosting 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postJobPostingJobPostingPost(jobPosting: JobPosting, xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPosting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postJobPostingJobPostingPost(jobPosting, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Put Company
         * @param {string} companyId 
         * @param {Company} company 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCompanyCompanyCompanyIdPut(companyId: string, company: Company, xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCompanyCompanyCompanyIdPut(companyId, company, xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationRequiredApi - factory interface
 * @export
 */
export const AuthenticationRequiredApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationRequiredApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Company
         * @param {string} companyId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyCompanyCompanyIdDelete(companyId: string, xApiKey?: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteCompanyCompanyCompanyIdDelete(companyId, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Job Posting
         * @param {string} postingId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJobPostingJobPostingPostingIdDelete(postingId: string, xApiKey?: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteJobPostingJobPostingPostingIdDelete(postingId, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get My Companies
         * @param {string} userId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCompaniesUserUserIdCompaniesGet(userId: string, xApiKey?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.getMyCompaniesUserUserIdCompaniesGet(userId, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get My Postings
         * @param {string} userId 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyPostingsUserUserIdPostingsGet(userId: string, xApiKey?: string, options?: any): AxiosPromise<Array<JobPosting>> {
            return localVarFp.getMyPostingsUserUserIdPostingsGet(userId, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch Job Posting
         * @param {string} postingId 
         * @param {JobPosting} jobPosting 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchJobPostingJobPostingPostingIdPatch(postingId: string, jobPosting: JobPosting, xApiKey?: string, options?: any): AxiosPromise<JobPosting> {
            return localVarFp.patchJobPostingJobPostingPostingIdPatch(postingId, jobPosting, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Company
         * @param {Company} company 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyCompanyPost(company: Company, xApiKey?: string, options?: any): AxiosPromise<Company> {
            return localVarFp.postCompanyCompanyPost(company, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Job Posting
         * @param {JobPosting} jobPosting 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postJobPostingJobPostingPost(jobPosting: JobPosting, xApiKey?: string, options?: any): AxiosPromise<JobPosting> {
            return localVarFp.postJobPostingJobPostingPost(jobPosting, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put Company
         * @param {string} companyId 
         * @param {Company} company 
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCompanyCompanyCompanyIdPut(companyId: string, company: Company, xApiKey?: string, options?: any): AxiosPromise<Company> {
            return localVarFp.putCompanyCompanyCompanyIdPut(companyId, company, xApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationRequiredApi - object-oriented interface
 * @export
 * @class AuthenticationRequiredApi
 * @extends {BaseAPI}
 */
export class AuthenticationRequiredApi extends BaseAPI {
    /**
     * 
     * @summary Delete Company
     * @param {string} companyId 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public deleteCompanyCompanyCompanyIdDelete(companyId: string, xApiKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).deleteCompanyCompanyCompanyIdDelete(companyId, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Job Posting
     * @param {string} postingId 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public deleteJobPostingJobPostingPostingIdDelete(postingId: string, xApiKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).deleteJobPostingJobPostingPostingIdDelete(postingId, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get My Companies
     * @param {string} userId 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public getMyCompaniesUserUserIdCompaniesGet(userId: string, xApiKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).getMyCompaniesUserUserIdCompaniesGet(userId, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get My Postings
     * @param {string} userId 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public getMyPostingsUserUserIdPostingsGet(userId: string, xApiKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).getMyPostingsUserUserIdPostingsGet(userId, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch Job Posting
     * @param {string} postingId 
     * @param {JobPosting} jobPosting 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public patchJobPostingJobPostingPostingIdPatch(postingId: string, jobPosting: JobPosting, xApiKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).patchJobPostingJobPostingPostingIdPatch(postingId, jobPosting, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Company
     * @param {Company} company 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public postCompanyCompanyPost(company: Company, xApiKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).postCompanyCompanyPost(company, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Job Posting
     * @param {JobPosting} jobPosting 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public postJobPostingJobPostingPost(jobPosting: JobPosting, xApiKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).postJobPostingJobPostingPost(jobPosting, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put Company
     * @param {string} companyId 
     * @param {Company} company 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public putCompanyCompanyCompanyIdPut(companyId: string, company: Company, xApiKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).putCompanyCompanyCompanyIdPut(companyId, company, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesCompaniesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Company
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyCompanyCompanyIdGet: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyCompanyCompanyIdGet', 'companyId', companyId)
            const localVarPath = `/company/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Company Postings
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPostingsCompanyCompanyIdPostingsGet: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyPostingsCompanyCompanyIdPostingsGet', 'companyId', companyId)
            const localVarPath = `/company/{company_id}/postings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Posting
         * @param {string} postingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostingPostingPostingIdGet: async (postingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('getPostingPostingPostingIdGet', 'postingId', postingId)
            const localVarPath = `/posting/{posting_id}`
                .replace(`{${"posting_id"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Postings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostingsPostingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/postings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Auth Google
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthGoogleAuthGooglePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompaniesCompaniesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompaniesCompaniesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Company
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyCompanyCompanyIdGet(companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyCompanyCompanyIdGet(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Company Postings
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyPostingsCompanyCompanyIdPostingsGet(companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyPostingsCompanyCompanyIdPostingsGet(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Posting
         * @param {string} postingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostingPostingPostingIdGet(postingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPosting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostingPostingPostingIdGet(postingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Postings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostingsPostingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostingsPostingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post Auth Google
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthGoogleAuthGooglePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthGoogleAuthGooglePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesCompaniesGet(options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.getCompaniesCompaniesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Company
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyCompanyCompanyIdGet(companyId: string, options?: any): AxiosPromise<Company> {
            return localVarFp.getCompanyCompanyCompanyIdGet(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Company Postings
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPostingsCompanyCompanyIdPostingsGet(companyId: string, options?: any): AxiosPromise<Array<JobPosting>> {
            return localVarFp.getCompanyPostingsCompanyCompanyIdPostingsGet(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Posting
         * @param {string} postingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostingPostingPostingIdGet(postingId: string, options?: any): AxiosPromise<JobPosting> {
            return localVarFp.getPostingPostingPostingIdGet(postingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Postings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostingsPostingsGet(options?: any): AxiosPromise<Array<JobPosting>> {
            return localVarFp.getPostingsPostingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Auth Google
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthGoogleAuthGooglePost(options?: any): AxiosPromise<any> {
            return localVarFp.postAuthGoogleAuthGooglePost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * 
     * @summary Get Companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getCompaniesCompaniesGet(options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getCompaniesCompaniesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Company
     * @param {string} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getCompanyCompanyCompanyIdGet(companyId: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getCompanyCompanyCompanyIdGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Company Postings
     * @param {string} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getCompanyPostingsCompanyCompanyIdPostingsGet(companyId: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getCompanyPostingsCompanyCompanyIdPostingsGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Posting
     * @param {string} postingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getPostingPostingPostingIdGet(postingId: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getPostingPostingPostingIdGet(postingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Postings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getPostingsPostingsGet(options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getPostingsPostingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Auth Google
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public postAuthGoogleAuthGooglePost(options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).postAuthGoogleAuthGooglePost(options).then((request) => request(this.axios, this.basePath));
    }
}



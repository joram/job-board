/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'logo_url': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'website_url': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const Currency = {
    Cad: 'CAD',
    Usd: 'USD'
} as const;

export type Currency = typeof Currency[keyof typeof Currency];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface JobPosting
 */
export interface JobPosting {
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'company_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'job_title': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'benefits': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'application_url': string;
    /**
     * 
     * @type {number}
     * @memberof JobPosting
     */
    'min_salary': number;
    /**
     * 
     * @type {number}
     * @memberof JobPosting
     */
    'max_salary': number;
    /**
     * 
     * @type {Currency}
     * @memberof JobPosting
     */
    'salary_currency': Currency;
}


/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'profile_picture': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * AuthenticationRequiredApi - axios parameter creator
 * @export
 */
export const AuthenticationRequiredApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Companies
         * @param {string} userId 
         * @param {string} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesUserUserIdCompaniesGet: async (userId: string, authToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getCompaniesUserUserIdCompaniesGet', 'userId', userId)
            const localVarPath = `/user/{user_id}/companies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authToken != null) {
                localVarHeaderParameter['auth-token'] = String(authToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyCompanyPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Update Company
         * @param {any} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdateCompanyCompanyCompanyIdPost: async (companyId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postUpdateCompanyCompanyCompanyIdPost', 'companyId', companyId)
            const localVarPath = `/company/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationRequiredApi - functional programming interface
 * @export
 */
export const AuthenticationRequiredApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationRequiredApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Companies
         * @param {string} userId 
         * @param {string} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompaniesUserUserIdCompaniesGet(userId: string, authToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompaniesUserUserIdCompaniesGet(userId, authToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCompanyCompanyPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompanyCompanyPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post Update Company
         * @param {any} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUpdateCompanyCompanyCompanyIdPost(companyId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUpdateCompanyCompanyCompanyIdPost(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationRequiredApi - factory interface
 * @export
 */
export const AuthenticationRequiredApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationRequiredApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Companies
         * @param {string} userId 
         * @param {string} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesUserUserIdCompaniesGet(userId: string, authToken?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.getCompaniesUserUserIdCompaniesGet(userId, authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompanyCompanyPost(options?: any): AxiosPromise<Company> {
            return localVarFp.postCompanyCompanyPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Update Company
         * @param {any} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdateCompanyCompanyCompanyIdPost(companyId: any, options?: any): AxiosPromise<Company> {
            return localVarFp.postUpdateCompanyCompanyCompanyIdPost(companyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationRequiredApi - object-oriented interface
 * @export
 * @class AuthenticationRequiredApi
 * @extends {BaseAPI}
 */
export class AuthenticationRequiredApi extends BaseAPI {
    /**
     * 
     * @summary Get Companies
     * @param {string} userId 
     * @param {string} [authToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public getCompaniesUserUserIdCompaniesGet(userId: string, authToken?: string, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).getCompaniesUserUserIdCompaniesGet(userId, authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public postCompanyCompanyPost(options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).postCompanyCompanyPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Update Company
     * @param {any} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationRequiredApi
     */
    public postUpdateCompanyCompanyCompanyIdPost(companyId: any, options?: AxiosRequestConfig) {
        return AuthenticationRequiredApiFp(this.configuration).postUpdateCompanyCompanyCompanyIdPost(companyId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootGet(options?: any): AxiosPromise<any> {
            return localVarFp.getRootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRootGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesCompaniesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Company
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyCompanyCompanyIdGet: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyCompanyCompanyIdGet', 'companyId', companyId)
            const localVarPath = `/company/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Company Postings
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPostingsCompanyCompanyIdPostingsGet: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyPostingsCompanyCompanyIdPostingsGet', 'companyId', companyId)
            const localVarPath = `/company/{company_id}/postings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Login
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginLoginGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getLoginLoginGet', 'code', code)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Posting
         * @param {string} postingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostingPostingPostingIdGet: async (postingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('getPostingPostingPostingIdGet', 'postingId', postingId)
            const localVarPath = `/posting/{posting_id}`
                .replace(`{${"posting_id"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Postings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostingsPostingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/postings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompaniesCompaniesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompaniesCompaniesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Company
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyCompanyCompanyIdGet(companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyCompanyCompanyIdGet(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Company Postings
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyPostingsCompanyCompanyIdPostingsGet(companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyPostingsCompanyCompanyIdPostingsGet(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Login
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginLoginGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginLoginGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Posting
         * @param {string} postingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostingPostingPostingIdGet(postingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPosting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostingPostingPostingIdGet(postingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Postings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostingsPostingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostingsPostingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesCompaniesGet(options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.getCompaniesCompaniesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Company
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyCompanyCompanyIdGet(companyId: string, options?: any): AxiosPromise<Company> {
            return localVarFp.getCompanyCompanyCompanyIdGet(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Company Postings
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPostingsCompanyCompanyIdPostingsGet(companyId: string, options?: any): AxiosPromise<Array<JobPosting>> {
            return localVarFp.getCompanyPostingsCompanyCompanyIdPostingsGet(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Login
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginLoginGet(code: string, options?: any): AxiosPromise<User> {
            return localVarFp.getLoginLoginGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Posting
         * @param {string} postingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostingPostingPostingIdGet(postingId: string, options?: any): AxiosPromise<JobPosting> {
            return localVarFp.getPostingPostingPostingIdGet(postingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Postings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostingsPostingsGet(options?: any): AxiosPromise<Array<JobPosting>> {
            return localVarFp.getPostingsPostingsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * 
     * @summary Get Companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getCompaniesCompaniesGet(options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getCompaniesCompaniesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Company
     * @param {string} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getCompanyCompanyCompanyIdGet(companyId: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getCompanyCompanyCompanyIdGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Company Postings
     * @param {string} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getCompanyPostingsCompanyCompanyIdPostingsGet(companyId: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getCompanyPostingsCompanyCompanyIdPostingsGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Login
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getLoginLoginGet(code: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getLoginLoginGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Posting
     * @param {string} postingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getPostingPostingPostingIdGet(postingId: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getPostingPostingPostingIdGet(postingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Postings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getPostingsPostingsGet(options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getPostingsPostingsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


